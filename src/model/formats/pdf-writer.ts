import { jsPDF, jsPDFOptions } from 'jspdf';
import autoTable, { CellDef, RowInput } from 'jspdf-autotable';
import {
  Checklist,
  ChecklistFile,
  ChecklistFileMetadata,
  ChecklistGroup,
  ChecklistGroup_Category,
  ChecklistItem,
  ChecklistItem_Type,
} from '../../../gen/ts/checklist';

type OrientationType = jsPDFOptions['orientation'];
type FormatType = jsPDFOptions['format'];
type AutoTabledPDF = jsPDF & { lastAutoTable: { finalY: number } };

export interface PdfWriterOptions {
  orientation?: OrientationType;
  format?: FormatType;
  outputCoverPage?: boolean;
}

export class PdfWriter {
  private static readonly DEBUG_LAYOUT = false;
  private static readonly GROUP_BOX_MARGIN = 0.4;
  private static readonly GROUP_TITLE_SIZE = 3;
  private static readonly MAIN_TITLE_FONT_SIZE = 30;
  private static readonly TITLE_TO_METADATA_SPACING = 15;
  private static readonly METADATA_HEADER_FONT_SIZE = 15;
  private static readonly METADATA_HEADER_HEIGHT = 2;
  private static readonly METADATA_VALUE_FONT_SIZE = 20;
  private static readonly METADATA_VALUE_HEIGHT = 3;
  private static readonly PREFIX_TEMPLATE: CellDef = {
    styles: {
      fontStyle: 'bold',
      halign: 'right',
      valign: 'top',
    },
  };
  private static readonly SPACER_CELL: CellDef = {
    content: '. '.repeat(50),
    styles: {
      overflow: 'hidden',
      valign: 'top',
    },
  };

  private _doc?: AutoTabledPDF;
  private _pageWidth = 0;
  private _pageHeight = 0;

  constructor(private _options?: PdfWriterOptions) {}

  public write(file: ChecklistFile): Blob {
    const doc = new jsPDF({
      format: this._options?.format || 'letter',
      orientation: this._options?.orientation || 'portrait',
      unit: 'em',
      putOnlyUsedFonts: true,
    });
    this._doc = doc as AutoTabledPDF;

    this._pageHeight = this._doc.internal.pageSize.getHeight();
    this._pageWidth = this._doc.internal.pageSize.getWidth();
    // TODO: Add Roboto instead (see https://www.devlinpeck.com/content/jspdf-custom-font).
    this._doc.setFont('helvetica', 'bold');

    if (file.metadata && this._options?.outputCoverPage) {
      this._addCover(file.metadata);
    }
    this._addGroups(file.groups);

    return this._doc.output('blob');
  }

  private _addCover(metadata: ChecklistFileMetadata) {
    if (!this._doc) return;
    // TODO: Fill out all the metadata with a nice layout
    let currentY = this._pageHeight / 3;
    this._addCenteredText('Checklists', currentY, PdfWriter.MAIN_TITLE_FONT_SIZE);
    currentY += PdfWriter.TITLE_TO_METADATA_SPACING;

    if (metadata.aircraftInfo) {
      this._addCenteredText('Aircraft:', currentY, PdfWriter.METADATA_HEADER_FONT_SIZE);
      currentY += PdfWriter.METADATA_HEADER_HEIGHT;
      this._addCenteredText(metadata.aircraftInfo, currentY, PdfWriter.METADATA_VALUE_FONT_SIZE);
      currentY += PdfWriter.METADATA_VALUE_HEIGHT;
    }
    if (metadata.makeAndModel) {
      this._addCenteredText('Aircraft make/model:', currentY, PdfWriter.METADATA_HEADER_FONT_SIZE);
      currentY += PdfWriter.METADATA_HEADER_HEIGHT;
      this._addCenteredText(metadata.makeAndModel, currentY, PdfWriter.METADATA_VALUE_FONT_SIZE);
      currentY += PdfWriter.METADATA_VALUE_HEIGHT;
    }
    if (metadata.manufacturerInfo) {
      this._addCenteredText('Manufacturer:', currentY, PdfWriter.METADATA_HEADER_FONT_SIZE);
      currentY += PdfWriter.METADATA_HEADER_HEIGHT;
      this._addCenteredText(metadata.manufacturerInfo, currentY, PdfWriter.METADATA_VALUE_FONT_SIZE);
      currentY += PdfWriter.METADATA_VALUE_HEIGHT;
    }
    if (metadata.copyrightInfo) {
      this._addCenteredText('Copyright:', currentY, PdfWriter.METADATA_HEADER_FONT_SIZE);
      currentY += PdfWriter.METADATA_HEADER_HEIGHT;
      this._addCenteredText(metadata.copyrightInfo, currentY, PdfWriter.METADATA_VALUE_FONT_SIZE);
      currentY += PdfWriter.METADATA_VALUE_HEIGHT;
    }

    // TODO: Add a "generated by" footer
    this._doc.addPage();
  }

  private _addGroups(groups: ChecklistGroup[]) {
    if (!this._doc) return;

    for (const group of groups) {
      this._addGroup(group);

      // Force starting a new page for each group.
      this._doc.addPage();
    }

    this._doc.deletePage(this._doc.internal.pages.length - 1);
  }

  private _addGroupTitle(group: ChecklistGroup) {
    if (!this._doc) return;

    this._doc.setFontSize(20);
    this._addCenteredText(group.title, PdfWriter.GROUP_TITLE_SIZE);
    this._doc.saveGraphicsState();

    let rectColor = 'black';
    if (group.category === ChecklistGroup_Category.abnormal) {
      rectColor = 'orange';
    } else if (group.category === ChecklistGroup_Category.emergency) {
      rectColor = 'red';
    }
    this._doc.setDrawColor(rectColor);
    this._doc.rect(
      PdfWriter.GROUP_BOX_MARGIN,
      PdfWriter.GROUP_BOX_MARGIN,
      this._pageWidth - PdfWriter.GROUP_BOX_MARGIN * 2,
      PdfWriter.GROUP_TITLE_SIZE + 1,
    );
    this._doc.restoreGraphicsState();
  }

  private _addGroup(group: ChecklistGroup) {
    if (!this._doc) return;

    this._addGroupTitle(group);

    let first = true;
    for (const checklist of group.checklists) {
      // Calculate where to start the next table.
      let startY = PdfWriter.GROUP_TITLE_SIZE * 2;
      if (!first) {
        const lastY = this._doc.lastAutoTable.finalY;
        if (lastY > this._pageHeight / 2) {
          // More than half the page is already used, start on the next page.
          this._doc.addPage();
        } else {
          startY = lastY + 2;
        }
      }
      first = false;

      autoTable(this._doc, {
        // Actual columns are: icon, prompt, spacer, expectation
        head: [[{ content: checklist.title, colSpan: 4, styles: { halign: 'center', fontSize: 16 } }]],
        body: this._checklistTableBody(checklist),
        showHead: 'firstPage',
        startY: startY,
        rowPageBreak: 'avoid',
        styles: PdfWriter.DEBUG_LAYOUT
          ? {
              lineWidth: 0.1,
            }
          : undefined,
      });
    }
  }

  private _checklistTableBody(checklist: Checklist): RowInput[] {
    return checklist.items.map((item: ChecklistItem) => {
      const cells: CellDef[] = [];
      const prompt: CellDef = {
        content: item.prompt,
        styles: {
          halign: 'left',
          valign: 'top',
        },
      };
      let prefix: CellDef | undefined;

      switch (item.type) {
        case ChecklistItem_Type.ITEM_TITLE:
          prompt.styles!.fontStyle = 'bold';
          break;
        case ChecklistItem_Type.ITEM_SPACE:
          // TODO: Skip alternating styles for blanks?
          prompt.styles!.minCellHeight = 2;
          break;
        case ChecklistItem_Type.ITEM_WARNING:
          // TODO: Icon
          prefix = this._prefixCell('WARNING: ');
          break;
        case ChecklistItem_Type.ITEM_CAUTION:
          // TODO: Icon
          prefix = this._prefixCell('CAUTION: ');
          break;
        case ChecklistItem_Type.ITEM_NOTE:
          prefix = this._prefixCell('NOTE: ');
          break;
      }
      if (prefix) {
        cells.push(prefix);
      }

      if (item.centered) {
        prompt.styles!.halign = 'center';
      } else if (prefix) {
        prefix.styles!.cellPadding = { left: item.indent };
      } else {
        prompt.styles!.cellPadding = { left: item.indent };
      }

      cells.push(prompt);

      if (item.type === ChecklistItem_Type.ITEM_CHALLENGE_RESPONSE) {
        const expectation: CellDef = {
          content: item.expectation,
          styles: {
            halign: 'left',
            valign: 'top',
          },
        };
        cells.push(PdfWriter.SPACER_CELL, expectation);
      }

      prompt.colSpan = 5 - cells.length;
      if (PdfWriter.DEBUG_LAYOUT) {
        prompt.content += `[span=${prompt.colSpan}]`;
      }

      return cells;
    });
  }

  private _prefixCell(content: string): CellDef {
    const def = structuredClone(PdfWriter.PREFIX_TEMPLATE);
    def.content = content;
    return def;
  }

  private _addCenteredText(txt: string, y: number, fontSize?: number) {
    if (!this._doc) return;

    const oldFontSize = this._doc.getFontSize();
    if (fontSize) {
      this._doc.setFontSize(fontSize);
    }
    this._doc.text(txt, this._pageWidth / 2, y, { align: 'center' });
    this._doc.setFontSize(oldFontSize);
  }
}
